generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  password        String
  name            String
  major           String?
  yearOfStudy     String?
  bio             String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relationships
  courses         UserCourse[]
  availability    Availability[]
  preferences     UserPreference?
  sentMessages    Message[]   @relation("MessageSender")
  receivedMessages Message[]  @relation("MessageReceiver")
}

model UserPreference {
  id                String  @id @default(cuid())
  userId            String  @unique
  groupSize         String  // "Individual", "Small", "Large"
  studyStyle        String  // "Visual", "Reading", "Discussion"

  // Relationships
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String      @id @default(cuid())
  code        String      @unique
  name        String

  // Relationships
  users       UserCourse[]
}

model UserCourse {
  id        String   @id @default(cuid())
  userId    String
  courseId  String

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Availability {
  id        String   @id @default(cuid())
  userId    String
  dayOfWeek Int      // 0 = Sunday, 6 = Saturday
  startTime String   // "HH:MM" format
  endTime   String   // "HH:MM" format

  // Relationships
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())

  // Relationships
  sender     User     @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User     @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
}